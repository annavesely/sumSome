// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// findDiscSum
int findDiscSum(int s, int m, Rcpp::NumericVector& u, Rcpp::NumericVector& v, Rcpp::NumericVector& cs);
RcppExport SEXP _sumSome_findDiscSum(SEXP sSEXP, SEXP mSEXP, SEXP uSEXP, SEXP vSEXP, SEXP csSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type u(uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type v(vSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type cs(csSEXP);
    rcpp_result_gen = Rcpp::wrap(findDiscSum(s, m, u, v, cs));
    return rcpp_result_gen;
END_RCPP
}
// permMin
bool permMin(const NumericVector& X, const int& B, const double& truncTo);
RcppExport SEXP _sumSome_permMin(SEXP XSEXP, SEXP BSEXP, SEXP truncToSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const double& >::type truncTo(truncToSEXP);
    rcpp_result_gen = Rcpp::wrap(permMin(X, B, truncTo));
    return rcpp_result_gen;
END_RCPP
}
// bisectionTD
List bisectionTD(const NumericMatrix& D0, const IntegerMatrix& I0, const NumericMatrix& R0, const int& s, const int& f0, const int& k, const int& B, const int& nMax);
RcppExport SEXP _sumSome_bisectionTD(SEXP D0SEXP, SEXP I0SEXP, SEXP R0SEXP, SEXP sSEXP, SEXP f0SEXP, SEXP kSEXP, SEXP BSEXP, SEXP nMaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type D0(D0SEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type I0(I0SEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type R0(R0SEXP);
    Rcpp::traits::input_parameter< const int& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const int& >::type f0(f0SEXP);
    Rcpp::traits::input_parameter< const int& >::type k(kSEXP);
    Rcpp::traits::input_parameter< const int& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const int& >::type nMax(nMaxSEXP);
    rcpp_result_gen = Rcpp::wrap(bisectionTD(D0, I0, R0, s, f0, k, B, nMax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sumSome_findDiscSum", (DL_FUNC) &_sumSome_findDiscSum, 5},
    {"_sumSome_permMin", (DL_FUNC) &_sumSome_permMin, 3},
    {"_sumSome_bisectionTD", (DL_FUNC) &_sumSome_bisectionTD, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_sumSome(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
